Given a linked list, determine if it has a cycle in it.

此题较为简单，利用try catch的思路更妙
class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
        val = x;
        next = null;
    }
}

public class solution {
    public boolean hasCycle(ListNode head) {
        if(head == null) return false;
        
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null && fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next;
            fast = fast.next;
            if(slow == fast) return true;
        }
        return false;
    }
}

利用try catch的思路
public class solution {
    public boolean hasCycle(ListNode head) {
        try {
            ListNode slow = head;
            ListNode fast = head.next;
            
            while(slow != fast) {
                slow = slow.next;
                fast = fast.next.next;
            }
            return true;
        } catch(NullPointerException e) {
            return false;
        }
    }
}
