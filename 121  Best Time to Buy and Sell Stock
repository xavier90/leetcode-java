Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an 
algorithm to find the maximum profit.

Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0

In this case, no transaction is done, i.e. max profit = 0.

此题思路不难，算法多样，先贴我自己的
pubic class solution {
    public int maxProfit(int[] prices) {
        int left = 0, right = 0;
        int max = 0;
        while(right < prices.length) {
            if(prices[left] > prices[right]) {
                if(left < right){
                    left++;
                } else {
                    left++;
                    right++;
                }
            } else {
                max = Math.max(max, prices[right]-prices[left]);
                right++;
            }
        }
        return max;
    }
}

我的代码不够简洁，下面是别人的
public class solution {
    public int maxProfit(int[] prices) {
        int minPrice = prices[0];
        int max = 0;
        for(int i = 0; i < prices.length; i++) {
            minPrice = Math.min(minPrice, prices[i]);
            max = Math.max(max, prices[i]-minPrice);
        }
        return max;
    }
}

Kadane's Algorithm

public class solution {
    public int maxProfit(int[] prices) {
        int maxCur = 0, maxSoFar = 0;
        for(int i = 0; i < prices.length; i++) {
            maxCur = Math.max(0, maxCur += prices[i]-prices[i-1]);
            maxSoFar = Math.max(maxCur, maxSoFar);
        }
        return maxSoFar;
    }
}
The logic to solve this problem is same as "max subarray problem" using Kadane's Algorithm. Since no body has mentioned this
so far, I thought it's a good thing for everybody to know. All the straight forward solution should work, but if the
interviewer twists the question slightly by giving the difference array of prices, Ex: for {1, 7, 4, 11}, if he 
gives {0, 6, -3, 7}, you might 
end up being confused.

Here, the logic is to calculate the difference (maxCur += prices[i] - prices[i-1]) of the original array, and find a 
contiguous subarray giving maximum profit. If the difference falls below 0, reset it to zero.
