Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

思路不难，判定条件需要巧妙设置

public class solution {
    public ListNode swapPairs(ListNode head) {
        ListNode pivot = new ListNode(0);
        pivot.next = head;
        ListNode cur = pivot;
        while(cur.next != null && cur.next.next != null) {
            ListNode slow = cur.next;
            ListNode fast = cur.next.next;
            cur.next = fast;
            slow.next = fast.next;
            fast.next = slow;
        }
        return pivot.next;
    }
}

递归的解法

public class solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null || head.next == null) return head;
        ListNode pivot = head.next;
        head.next = swapPairs(head.next.next);
        pivot.next = head;
        return pivot;
    }
}
