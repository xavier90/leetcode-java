Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum 
of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in 
a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example: 19 is a happy number

1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1

利用了Floyd–Warshall algorithm，这个算法不懂，其实此题思路简单，就是把数字计算到不再变化为止

public solution {
    public int digitSquareSum(int n) {
        int sum = 0, tmp;
        while(n != 0) {
            tmp = n % 10;
            sum += tmp * tmp;
            n /= 10;
        }
        return sum;
    }
    
    public boolean isHappy(int n) {
        int slow = n, fast = n;
        do {
            slow = digitSquareSum(slow);
            fast = digitSquareSum(fast);
            fast = digitSquareSum(fast);
        } while (slow != fast);
        
        if(slow == 1) {
            return true;
        } else {
            return false;
        }
    }
}

利用HashSet的方法，利用了相同的数不能add的特性。其实原理也是sum最终不会再变化

public solution {
    public boolean isHappy(int n) {
        HashSet<Integer> set = new HashSet<Integer>();
        
        int sum, tmp;
        while(set.add(n)) {
            sum = 0
            while(n != 0) {
                tmp = n % 10;
                sum += tmp * tmp;
                n /= 10;
            }
            if(sum == 1) {
                return true;
            } else {
                n = sum;
            }
        }
        return false;
    }
}
